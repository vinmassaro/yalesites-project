name: Release pull request
on:
  pull_request:
    types:
      - synchronize
      - closed
    branches:
      - master
  workflow_dispatch:
env:
  YALESITES_BUILD_TOKEN: ${{ secrets.YALESITES_BUILD_TOKEN }}
  GH_TOKEN: ${{ secrets.YALESITES_BUILD_TOKEN }}
  ACCESS_TOKEN: ${{ secrets.YALESITES_BUILD_TOKEN }}
  REPO: ${{ github.repository }}
  PR_NUMBER: ${{ github.event.number }}
  RELEASE_PR_URL: ${{ github.event.pull_request._links.html.href }}
  RELEASE_SITES: ${{ vars.RELEASE_SITES }}
jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
    - name: Determine Terminus version
      shell: bash
      run: |
        TERMINUS_RELEASE=$(
          curl --silent \
            --header 'authorization: Bearer ${{ github.token }}' \
            "https://api.github.com/repos/pantheon-systems/terminus/releases/latest" \
            | perl -nle'print $& while m#"tag_name": "\K[^"]*#g'
        )
        echo "TERMINUS_RELEASE=$TERMINUS_RELEASE" >> $GITHUB_ENV

    - name: Install Terminus
      shell: bash
      run: |
        mkdir ~/terminus && cd ~/terminus
        echo "Installing Terminus v$TERMINUS_RELEASE"
        curl -L https://github.com/pantheon-systems/terminus/releases/download/$TERMINUS_RELEASE/terminus.phar -o /usr/local/bin/terminus
        chmod +x /usr/local/bin/terminus

    - name: Authenticate to Terminus
      env:
        TERMINUS_TOKEN: ${{ secrets.TERMINUS_TOKEN }}
      run: |
        terminus auth:login --machine-token="${TERMINUS_TOKEN}"

    - name: Install SSH key
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        known_hosts: unnecessary
        config: ${{ secrets.SSH_CONFIG }}

    - name: Cache terminus
      uses: actions/cache@v4
      id: terminus-cache
      with:
        path: |
          /usr/local/bin/terminus
          ~/.terminus
          ~/.ssh
        key: ${{ runner.os }}-terminus-cache-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-terminus-cache-

  get_next_release_version:
    runs-on: ubuntu-latest
    needs: [setup]
    if: ${{ github.event.action != 'synchronize' && github.event.action != 'closed' }}
    outputs:
      NEXT_VERSION: ${{ steps.get_release_number.outputs.next_version }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        ref: master
        fetch-depth: 0

    - name: Setup node
      uses: actions/setup-node@v4
      with:
        node-version: 20

    - name: Git setup
      run: |
        git config user.name github-actions
        git config user.email github-actions@github.com

    - name: Get next release number
      id: get_release_number
      run: |
        if [[ "$PR_NUMBER" ]]; then
          release_branch=$(gh pr view "$PR_NUMBER" --json headRefName --jq '.[]')
        else
          next_version="v1.0.5"
          
          if [ -z "$next_version" ]; then
            exit 1
          else
            release_branch="${next_version//.}"
          fi
        fi
        echo next_version="$next_version" >> "$GITHUB_OUTPUT"

        # Set release branch as a variable for access.
        gh variable set RELEASE_BRANCH --body "$release_branch"

    - name: Create release branch
      env:
        RELEASE_BRANCH: ${{ vars.RELEASE_BRANCH }}
      run: |
        echo "The release branch is: $RELEASE_BRANCH"
